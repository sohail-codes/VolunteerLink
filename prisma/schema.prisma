generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                  @id @unique @default(autoincrement())
  uuid           String               @unique @default(uuid())
  avatar         String?
  first          String?
  last           String?
  phone          String?
  dob            DateTime?
  email          String
  password       String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  address        Address?
  otps           OTP[]
  gender         Gender               @default(unspecified)
  events         Event[]
  additionalInfo Json?
  role           userRole             @default(user)
  participation  EventParticipation[]
}

model EventParticipation {
  id      Int                 @id @unique @default(autoincrement())
  user    User                @relation(fields: [userId], references: [id])
  userId  Int
  status  participationStatus @default(INREVIEW)
  event   Event               @relation(fields: [eventId], references: [id])
  eventId Int
}

enum participationStatus {
  INREVIEW
  ACCEPTED
  REJECTED
}

enum userRole {
  user
  ngo
}

enum Gender {
  male
  female
  unspecified
}

model OTP {
  id        Int      @id @unique @default(autoincrement())
  value     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model Address {
  id      Int    @id @unique @default(autoincrement())
  street  String
  city    String
  state   String
  zipCode String
  country String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model Event {
  id            Int                  @id @unique @default(autoincrement())
  uuid          String               @unique @default(uuid())
  title         String
  description   String               @db.LongText
  date          String
  startDate     DateTime?
  endDate       DateTime?
  tags          Tag[]
  data          Json?                @default("{}")
  url           String?
  organizer     Organizer            @relation(fields: [organizerId], references: [id])
  organizerId   Int
  location      Location             @relation(fields: [locationId], references: [id])
  locationId    Int
  source        Source?              @relation(fields: [sourceId], references: [id])
  sourceId      Int?
  legacyId      String?
  updatedAt     DateTime             @updatedAt
  createdAt     DateTime             @default(now())
  createdBy     User?                @relation(fields: [creatorId], references: [id])
  creatorId     Int?
  participation EventParticipation[]
}

model Source {
  id     Int     @id
  name   String
  events Event[]
}

model Location {
  id           Int          @id @default(autoincrement())
  locationType LocationType
  longitude    Float        @default(0)
  latitude     Float        @default(0)
  regions      Region[]     @relation(name: "LocationToRegion")
  event        Event[]
}

model Region {
  name      String     @id @unique
  locations Location[] @relation(name: "LocationToRegion")
}

enum LocationType {
  REGIONAL
  LOCAL
}

model Organizer {
  id        Int      @id @unique @default(autoincrement())
  events    Event[]
  name      String   @unique
  logo      String?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}
